/* tslint:disable */
/* eslint-disable */
/**
 * VNDIRECT Stock API
 * API để lấy thông tin cổ phiếu, ETF và các sản phẩm tài chính từ VNDIRECT
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetNews200Response
 */
export interface GetNews200Response {
    /**
     * Trang hiện tại
     * @type {number}
     * @memberof GetNews200Response
     */
    'currentPage': number;
    /**
     * Danh sách tin tức
     * @type {Array<News>}
     * @memberof GetNews200Response
     */
    'data': Array<News>;
    /**
     * Số lượng bản ghi trong trang hiện tại
     * @type {number}
     * @memberof GetNews200Response
     */
    'size': number;
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetNews200Response
     */
    'totalElements': number;
    /**
     * Tổng số trang
     * @type {number}
     * @memberof GetNews200Response
     */
    'totalPages': number;
}
/**
 * 
 * @export
 * @interface GetStocks200Response
 */
export interface GetStocks200Response {
    /**
     * Trang hiện tại
     * @type {number}
     * @memberof GetStocks200Response
     */
    'currentPage': number;
    /**
     * Danh sách cổ phiếu/sản phẩm tài chính
     * @type {Array<Stock>}
     * @memberof GetStocks200Response
     */
    'data': Array<Stock>;
    /**
     * Số lượng bản ghi trong trang hiện tại
     * @type {number}
     * @memberof GetStocks200Response
     */
    'size': number;
    /**
     * Tổng số bản ghi
     * @type {number}
     * @memberof GetStocks200Response
     */
    'totalElements': number;
    /**
     * Tổng số trang
     * @type {number}
     * @memberof GetStocks200Response
     */
    'totalPages': number;
}
/**
 * Thông tin lỗi
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Loại lỗi
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
    /**
     * Mô tả chi tiết lỗi
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * Mã lỗi HTTP
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
}
/**
 * Thông tin tin tức tài chính
 * @export
 * @interface News
 */
export interface News {
    /**
     * ID tin tức
     * @type {string}
     * @memberof News
     */
    'newsId': string;
    /**
     * Nhóm tin tức
     * @type {string}
     * @memberof News
     */
    'newsGroup'?: string;
    /**
     * Loại tin tức
     * @type {string}
     * @memberof News
     */
    'newsType'?: NewsNewsTypeEnum;
    /**
     * Mã cổ phiếu liên quan (phân cách bằng dấu phẩy)
     * @type {string}
     * @memberof News
     */
    'tagCodes'?: string;
    /**
     * Tiêu đề tin tức
     * @type {string}
     * @memberof News
     */
    'newsTitle': string;
    /**
     * Tóm tắt tin tức
     * @type {string}
     * @memberof News
     */
    'newsAbstract'?: string;
    /**
     * Nội dung tin tức đầy đủ (HTML)
     * @type {string}
     * @memberof News
     */
    'newsContent'?: string;
    /**
     * URL ảnh thumbnail
     * @type {string}
     * @memberof News
     */
    'thumbnailUrl'?: string;
    /**
     * Ngày tin tức (YYYY-MM-DD)
     * @type {string}
     * @memberof News
     */
    'newsDate': string;
    /**
     * Thời gian tin tức (HH:mm:ss)
     * @type {string}
     * @memberof News
     */
    'newsTime': string;
    /**
     * Nguồn tin tức
     * @type {string}
     * @memberof News
     */
    'newsSource': string;
    /**
     * URL gốc của tin tức
     * @type {string}
     * @memberof News
     */
    'newsUrl'?: string;
    /**
     * URL tin tức trên DStock
     * @type {string}
     * @memberof News
     */
    'dstockUrl'?: string;
    /**
     * Ngôn ngữ tin tức
     * @type {string}
     * @memberof News
     */
    'locale'?: NewsLocaleEnum;
    /**
     * Đánh dấu tin nóng
     * @type {string}
     * @memberof News
     */
    'hotNews'?: NewsHotNewsEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum NewsNewsTypeEnum {
    stock_news = 'stock_news',
    banking_finance_news = 'banking_finance_news',
    company_news = 'company_news'
}
/**
    * @export
    * @enum {string}
    */
export enum NewsLocaleEnum {
    VN = 'VN',
    EN = 'EN'
}
/**
    * @export
    * @enum {string}
    */
export enum NewsHotNewsEnum {
    Y = 'Y',
    N = 'N'
}

/**
 * Thông tin cổ phiếu hoặc sản phẩm tài chính
 * @export
 * @interface Stock
 */
export interface Stock {
    /**
     * Mã cổ phiếu/sản phẩm
     * @type {string}
     * @memberof Stock
     */
    'code'?: string;
    /**
     * Tên công ty (tiếng Việt)
     * @type {string}
     * @memberof Stock
     */
    'companyName'?: string;
    /**
     * Tên công ty (tiếng Anh)
     * @type {string}
     * @memberof Stock
     */
    'companyNameEng'?: string;
    /**
     * Tên viết tắt
     * @type {string}
     * @memberof Stock
     */
    'shortName'?: string;
    /**
     * Sàn giao dịch
     * @type {string}
     * @memberof Stock
     */
    'floor'?: StockFloorEnum;
    /**
     * Tên ngành
     * @type {string}
     * @memberof Stock
     */
    'industryName'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StockFloorEnum {
    HOSE = 'HOSE',
    HNX = 'HNX',
    UPCOM = 'UPCOM'
}


/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint để truy vấn tin tức về chứng khoán, ngân hàng và tài chính
         * @summary Lấy danh sách tin tức tài chính
         * @param {string} [q] Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - newsSource: VNECONOMY, TAPCHICONGTHUONG, CAFEF, v.v. - newsType: banking_finance_news, stock_news, company_news - tagCodes: mã cổ phiếu (VD: GEE,SHB,HSG,HPG) - newsDate: ngày tin tức (YYYY-MM-DD)  Ví dụ: newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news 
         * @param {string} [sort] Sắp xếp kết quả. Hỗ trợ sắp xếp theo: - newsDate: ngày tin tức (asc/desc) - newsTime: thời gian tin tức (asc/desc)  Ví dụ: newsDate:desc~newsTime:desc 
         * @param {number} [size] Số lượng bản ghi tối đa trả về trong một trang
         * @param {number} [page] Số trang (bắt đầu từ 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews: async (q?: string, sort?: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint để truy vấn tin tức về chứng khoán, ngân hàng và tài chính
         * @summary Lấy danh sách tin tức tài chính
         * @param {string} [q] Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - newsSource: VNECONOMY, TAPCHICONGTHUONG, CAFEF, v.v. - newsType: banking_finance_news, stock_news, company_news - tagCodes: mã cổ phiếu (VD: GEE,SHB,HSG,HPG) - newsDate: ngày tin tức (YYYY-MM-DD)  Ví dụ: newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news 
         * @param {string} [sort] Sắp xếp kết quả. Hỗ trợ sắp xếp theo: - newsDate: ngày tin tức (asc/desc) - newsTime: thời gian tin tức (asc/desc)  Ví dụ: newsDate:desc~newsTime:desc 
         * @param {number} [size] Số lượng bản ghi tối đa trả về trong một trang
         * @param {number} [page] Số trang (bắt đầu từ 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNews(q?: string, sort?: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNews200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNews(q, sort, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.getNews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * Endpoint để truy vấn tin tức về chứng khoán, ngân hàng và tài chính
         * @summary Lấy danh sách tin tức tài chính
         * @param {NewsApiGetNewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews(requestParameters: NewsApiGetNewsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetNews200Response> {
            return localVarFp.getNews(requestParameters.q, requestParameters.sort, requestParameters.size, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getNews operation in NewsApi.
 * @export
 * @interface NewsApiGetNewsRequest
 */
export interface NewsApiGetNewsRequest {
    /**
     * Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - newsSource: VNECONOMY, TAPCHICONGTHUONG, CAFEF, v.v. - newsType: banking_finance_news, stock_news, company_news - tagCodes: mã cổ phiếu (VD: GEE,SHB,HSG,HPG) - newsDate: ngày tin tức (YYYY-MM-DD)  Ví dụ: newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news 
     * @type {string}
     * @memberof NewsApiGetNews
     */
    readonly q?: string

    /**
     * Sắp xếp kết quả. Hỗ trợ sắp xếp theo: - newsDate: ngày tin tức (asc/desc) - newsTime: thời gian tin tức (asc/desc)  Ví dụ: newsDate:desc~newsTime:desc 
     * @type {string}
     * @memberof NewsApiGetNews
     */
    readonly sort?: string

    /**
     * Số lượng bản ghi tối đa trả về trong một trang
     * @type {number}
     * @memberof NewsApiGetNews
     */
    readonly size?: number

    /**
     * Số trang (bắt đầu từ 1)
     * @type {number}
     * @memberof NewsApiGetNews
     */
    readonly page?: number
}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
    /**
     * Endpoint để truy vấn tin tức về chứng khoán, ngân hàng và tài chính
     * @summary Lấy danh sách tin tức tài chính
     * @param {NewsApiGetNewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public getNews(requestParameters: NewsApiGetNewsRequest = {}, options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).getNews(requestParameters.q, requestParameters.sort, requestParameters.size, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StocksApi - axios parameter creator
 * @export
 */
export const StocksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint để truy vấn thông tin cổ phiếu, ETF, và các sản phẩm tài chính khác
         * @summary Lấy danh sách cổ phiếu và sản phẩm tài chính
         * @param {string} [q] Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - type: IFC, ETF, STOCK - status: LISTED, DELISTED  Ví dụ: type:IFC,ETF,STOCK~status:LISTED 
         * @param {string} [fields] Danh sách các trường dữ liệu cần trả về, phân cách bằng dấu phẩy. Các trường có sẵn: code, companyName, companyNameEng, shortName, floor, industryName 
         * @param {number} [size] Số lượng bản ghi tối đa trả về trong một trang
         * @param {number} [page] Số trang (bắt đầu từ 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStocks: async (q?: string, fields?: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StocksApi - functional programming interface
 * @export
 */
export const StocksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StocksApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint để truy vấn thông tin cổ phiếu, ETF, và các sản phẩm tài chính khác
         * @summary Lấy danh sách cổ phiếu và sản phẩm tài chính
         * @param {string} [q] Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - type: IFC, ETF, STOCK - status: LISTED, DELISTED  Ví dụ: type:IFC,ETF,STOCK~status:LISTED 
         * @param {string} [fields] Danh sách các trường dữ liệu cần trả về, phân cách bằng dấu phẩy. Các trường có sẵn: code, companyName, companyNameEng, shortName, floor, industryName 
         * @param {number} [size] Số lượng bản ghi tối đa trả về trong một trang
         * @param {number} [page] Số trang (bắt đầu từ 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStocks(q?: string, fields?: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStocks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStocks(q, fields, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StocksApi.getStocks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StocksApi - factory interface
 * @export
 */
export const StocksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StocksApiFp(configuration)
    return {
        /**
         * Endpoint để truy vấn thông tin cổ phiếu, ETF, và các sản phẩm tài chính khác
         * @summary Lấy danh sách cổ phiếu và sản phẩm tài chính
         * @param {StocksApiGetStocksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStocks(requestParameters: StocksApiGetStocksRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetStocks200Response> {
            return localVarFp.getStocks(requestParameters.q, requestParameters.fields, requestParameters.size, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStocks operation in StocksApi.
 * @export
 * @interface StocksApiGetStocksRequest
 */
export interface StocksApiGetStocksRequest {
    /**
     * Query string để lọc dữ liệu. Hỗ trợ các bộ lọc: - type: IFC, ETF, STOCK - status: LISTED, DELISTED  Ví dụ: type:IFC,ETF,STOCK~status:LISTED 
     * @type {string}
     * @memberof StocksApiGetStocks
     */
    readonly q?: string

    /**
     * Danh sách các trường dữ liệu cần trả về, phân cách bằng dấu phẩy. Các trường có sẵn: code, companyName, companyNameEng, shortName, floor, industryName 
     * @type {string}
     * @memberof StocksApiGetStocks
     */
    readonly fields?: string

    /**
     * Số lượng bản ghi tối đa trả về trong một trang
     * @type {number}
     * @memberof StocksApiGetStocks
     */
    readonly size?: number

    /**
     * Số trang (bắt đầu từ 1)
     * @type {number}
     * @memberof StocksApiGetStocks
     */
    readonly page?: number
}

/**
 * StocksApi - object-oriented interface
 * @export
 * @class StocksApi
 * @extends {BaseAPI}
 */
export class StocksApi extends BaseAPI {
    /**
     * Endpoint để truy vấn thông tin cổ phiếu, ETF, và các sản phẩm tài chính khác
     * @summary Lấy danh sách cổ phiếu và sản phẩm tài chính
     * @param {StocksApiGetStocksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StocksApi
     */
    public getStocks(requestParameters: StocksApiGetStocksRequest = {}, options?: RawAxiosRequestConfig) {
        return StocksApiFp(this.configuration).getStocks(requestParameters.q, requestParameters.fields, requestParameters.size, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



